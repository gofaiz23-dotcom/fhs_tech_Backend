// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Users Table
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens        RefreshToken[]
  userBrandAccess      UserBrandAccess[]
  userMarketplaceAccess UserMarketplaceAccess[]
  userShippingAccess   UserShippingAccess[]
  loginHistory         UserLoginHistory[]
  
  // Management History Relations
  adminActions UserManagementHistory[] @relation("AdminActions")
  targetUserActions UserManagementHistory[] @relation("TargetUserActions")
  adminBrandActions BrandManagementHistory[] @relation("AdminBrandActions")
  adminMarketplaceActions MarketplaceManagementHistory[] @relation("AdminMarketplaceActions")
  adminShippingActions ShippingManagementHistory[] @relation("AdminShippingActions")
  adminPermissionActions PermissionManagementHistory[] @relation("AdminPermissionActions")
  targetUserPermissionActions PermissionManagementHistory[] @relation("TargetUserPermissionActions")
  productActions ProductManagementHistory[] @relation("UserProductActions")
  listingActions ListingManagementHistory[] @relation("UserListingActions")

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([createdAt])
}

enum Role {
  USER  @map("user")
  ADMIN @map("admin")
}

// 2. Brands Table
model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userBrandAccess UserBrandAccess[]
  managementHistory BrandManagementHistory[]
  productActions ProductManagementHistory[] @relation("BrandProductActions")
  products Product[]
  listingActions ListingManagementHistory[] @relation("BrandListingActions")
  listings Listing[]

  @@map("brands")
  @@index([name])
  @@index([createdAt])
}

// 3. Marketplaces Table
model Marketplace {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userMarketplaceAccess UserMarketplaceAccess[]
  managementHistory MarketplaceManagementHistory[]

  @@map("marketplaces")
  @@index([name])
  @@index([createdAt])
}

// 4. Shipping Companies Table
model ShippingCompany {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userShippingAccess UserShippingAccess[]
  managementHistory ShippingManagementHistory[]

  @@map("shipping_companies")
  @@index([name])
  @@index([createdAt])
}

// 5. Refresh Tokens Table
model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isRevoked])
}

// 6. User Brand Access Table
model UserBrandAccess {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  brandId   Int      @map("brand_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
  @@map("user_brand_access")
  @@index([userId, brandId])
  @@index([isActive])
  @@index([createdAt])
}

// 7. User Marketplace Access Table
model UserMarketplaceAccess {
  id            Int         @id @default(autoincrement())
  userId        Int         @map("user_id")
  marketplaceId Int         @map("marketplace_id")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketplace Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)

  @@unique([userId, marketplaceId])
  @@map("user_marketplace_access")
  @@index([userId, marketplaceId])
  @@index([isActive])
  @@index([createdAt])
}

// 8. User Shipping Access Table
model UserShippingAccess {
  id                Int             @id @default(autoincrement())
  userId            Int             @map("user_id")
  shippingCompanyId Int             @map("shipping_company_id")
  isActive          Boolean         @default(true) @map("is_active")
  createdAt         DateTime        @default(now()) @map("created_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingCompany ShippingCompany @relation(fields: [shippingCompanyId], references: [id], onDelete: Cascade)

  @@unique([userId, shippingCompanyId])
  @@map("user_shipping_access")
  @@index([userId, shippingCompanyId])
  @@index([isActive])
  @@index([createdAt])
}

// 9. User Login History Table
model UserLoginHistory {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  loginTime       DateTime  @map("login_time")
  logoutTime      DateTime? @map("logout_time")
  sessionDuration Int?      @map("session_duration") // in minutes
  ipAddress       String?   @map("ip_address")
  networkType     String?   @map("network_type")
  userAgent       String?   @map("user_agent")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_login_history")
  @@index([userId])
  @@index([loginTime])
  @@index([logoutTime])
  @@index([ipAddress])
  @@index([createdAt])
}

// Management History Tables
model UserManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  targetUserId Int?    @map("target_user_id")
  action      String   // CREATE, UPDATE, DELETE, ROLE_CHANGE, EMAIL_CHANGE, PASSWORD_CHANGE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminActions", fields: [adminId], references: [id], onDelete: Cascade)
  targetUser  User?    @relation("TargetUserActions", fields: [targetUserId], references: [id], onDelete: SetNull)

  @@map("user_management_history")
  @@index([adminId])
  @@index([targetUserId])
  @@index([action])
  @@index([createdAt])
}

model BrandManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  brandId     Int      @map("brand_id")
  action      String   // CREATE, UPDATE, DELETE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminBrandActions", fields: [adminId], references: [id], onDelete: Cascade)
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("brand_management_history")
  @@index([adminId])
  @@index([brandId])
  @@index([action])
  @@index([createdAt])
}

model MarketplaceManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  marketplaceId Int    @map("marketplace_id")
  action      String   // CREATE, UPDATE, DELETE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminMarketplaceActions", fields: [adminId], references: [id], onDelete: Cascade)
  marketplace Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)

  @@map("marketplace_management_history")
  @@index([adminId])
  @@index([marketplaceId])
  @@index([action])
  @@index([createdAt])
}

model ShippingManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  shippingId  Int      @map("shipping_id")
  action      String   // CREATE, UPDATE, DELETE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminShippingActions", fields: [adminId], references: [id], onDelete: Cascade)
  shipping    ShippingCompany @relation(fields: [shippingId], references: [id], onDelete: Cascade)

  @@map("shipping_management_history")
  @@index([adminId])
  @@index([shippingId])
  @@index([action])
  @@index([createdAt])
}

// Permission Management History
model PermissionManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  targetUserId Int    @map("target_user_id")
  entityType  String   // BRAND, MARKETPLACE, SHIPPING
  entityId    Int      @map("entity_id")
  action      String   // GRANT, REVOKE, TOGGLE
  details     Json?    // Additional details like old/new access status
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminPermissionActions", fields: [adminId], references: [id], onDelete: Cascade)
  targetUser  User     @relation("TargetUserPermissionActions", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@map("permission_management_history")
  @@index([adminId])
  @@index([targetUserId])
  @@index([entityType])
  @@index([entityId])
  @@index([action])
  @@index([createdAt])
}

// Product Management History (Future)
model ProductManagementHistory {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")        // User who added the product
  brandId     Int      @map("brand_id")       // Brand for which product was added
  productId   Int?     @map("product_id")     // Product ID (if available)
  action      String   // ADD, UPDATE, DELETE, BULK_ADD
  details     Json?    // Product details, old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation("UserProductActions", fields: [userId], references: [id], onDelete: Cascade)
  brand       Brand    @relation("BrandProductActions", fields: [brandId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_management_history")
  @@index([userId])
  @@index([brandId])
  @@index([productId])
  @@index([action])
  @@index([createdAt])
}

// 10. Products Table
model Product {
  id          Int      @id @default(autoincrement())
  brandId     Int      @map("brand_id")
  title       String
  groupSku    String   @unique @map("group_sku")
  subSku      String?  @map("sub_sku")  // Nullable, supports comma-separated values like "123ed,345Df,678gh"
  category    String
  collectionName String @default("") @map("collection_name")
  shipTypes   String   @map("ship_types")
  singleSetItem String @map("single_set_item")
  
  
  // Brand Pricing Columns (Mandatory)
  brandRealPrice      Decimal @map("brand_real_price") @db.Decimal(10,2)
  brandMiscellaneous  Decimal @map("brand_miscellaneous") @db.Decimal(10,2)
  brandPrice          Decimal @map("brand_price") @db.Decimal(10,2)
  msrp               Decimal @default(0.00) @map("msrp") @db.Decimal(10,2) // Manufacturer's Suggested Retail Price
  
  // Ecommerce Pricing Columns (Mandatory)
  shippingPrice       Decimal @map("shipping_price") @db.Decimal(10,2)
  commissionPrice     Decimal @map("commission_price") @db.Decimal(10,2)
  profitMarginPrice   Decimal @map("profit_margin_price") @db.Decimal(10,2)
  ecommerceMiscellaneous Decimal @map("ecommerce_miscellaneous") @db.Decimal(10,2)
  ecommercePrice      Decimal @map("ecommerce_price") @db.Decimal(10,2)
  
  // Image Columns (Optional)
  mainImageUrl        String? @map("main_image_url") // Main product image URL
  galleryImages       Json?   @map("gallery_images") // Array of gallery image URLs
  
  attributes  Json     // All extra data in JSONB format
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  productHistory ProductManagementHistory[]
  listings Listing[]

  @@map("products")
  @@index([brandId])
  @@index([category])
  @@index([ecommercePrice])
  @@index([createdAt])
  @@index([brandId, category])
  @@index([brandId, ecommercePrice])
}

// 11. Listings Table (Only subSku must exist in product's subSku field)
model Listing {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")  // Reference to Product - For validation only
  brandId     Int      @map("brand_id")
  title       String
  sku         String   // Not unique - multiple listings can have same SKU
  subSku      String?  @map("sub_sku")  // Must exist in product's subSku field
  category    String
  collectionName String @default("") @map("collection_name")
  shipTypes   String   @map("ship_types")
  singleSetItem String @map("single_set_item")
  
  
  // Brand Pricing Columns (Mandatory)
  brandRealPrice      Decimal @map("brand_real_price") @db.Decimal(10,2)
  brandMiscellaneous  Decimal @map("brand_miscellaneous") @db.Decimal(10,2)
  brandPrice          Decimal @map("brand_price") @db.Decimal(10,2)
  msrp               Decimal @default(0.00) @map("msrp") @db.Decimal(10,2) // Manufacturer's Suggested Retail Price
  
  // Ecommerce Pricing Columns (Mandatory)
  shippingPrice       Decimal @map("shipping_price") @db.Decimal(10,2)
  commissionPrice     Decimal @map("commission_price") @db.Decimal(10,2)
  profitMarginPrice   Decimal @map("profit_margin_price") @db.Decimal(10,2)
  ecommerceMiscellaneous Decimal @map("ecommerce_miscellaneous") @db.Decimal(10,2)
  ecommercePrice      Decimal @map("ecommerce_price") @db.Decimal(10,2)
  
  // Image Columns (Optional)
  mainImageUrl        String? @map("main_image_url") // Main listing image URL
  galleryImages       Json?   @map("gallery_images") // Array of gallery image URLs
  
  // Product Counts (JSONB - maps each subSku value to its quantity)
  productCounts       Json?   @map("product_counts") // Example: {"subsku-1": 10, "subsku-2": 5}
  
  attributes  Json     // All extra data in JSONB format
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  listingHistory ListingManagementHistory[]

  @@map("listings")
  @@index([productId])
  @@index([brandId])
  @@index([category])
  @@index([ecommercePrice])
  @@index([createdAt])
  @@index([brandId, category])
  @@index([brandId, ecommercePrice])
}

// Listing Management History
model ListingManagementHistory {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")        // User who performed the action
  brandId     Int      @map("brand_id")       // Brand for which listing was managed
  listingId   Int?     @map("listing_id")     // Listing ID (if available)
  action      String   // CREATE, UPDATE, DELETE, BULK_CREATE, DELETE_ALL
  details     Json?    // Listing details, old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation("UserListingActions", fields: [userId], references: [id], onDelete: Cascade)
  brand       Brand    @relation("BrandListingActions", fields: [brandId], references: [id], onDelete: Cascade)
  listing     Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("listing_management_history")
  @@index([userId])
  @@index([brandId])
  @@index([listingId])
  @@index([action])
  @@index([createdAt])
}

// 12. Settings Table
model Setting {
  id              Int      @id @default(autoincrement())
  inventoryConfig Json     @default("{\"minValue\": 3, \"maxValue\": null}") @map("inventory_config") // JSONB: {minValue: 3, maxValue: null}
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("settings")
  @@index([createdAt])
}


