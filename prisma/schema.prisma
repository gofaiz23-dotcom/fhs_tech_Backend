// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Users Table
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens        RefreshToken[]
  userBrandAccess      UserBrandAccess[]
  userMarketplaceAccess UserMarketplaceAccess[]
  userShippingAccess   UserShippingAccess[]
  loginHistory         UserLoginHistory[]

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([createdAt])
}

enum Role {
  USER  @map("user")
  ADMIN @map("admin")
}

// 2. Brands Table
model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userBrandAccess UserBrandAccess[]
  products Product[]
  listings Listing[]
  inventory Inventory[]

  @@map("brands")
  @@index([name])
  @@index([createdAt])
}

// 3. Marketplaces Table
model Marketplace {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userMarketplaceAccess UserMarketplaceAccess[]

  @@map("marketplaces")
  @@index([name])
  @@index([createdAt])
}

// 4. Shipping Companies Table
model ShippingCompany {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userShippingAccess UserShippingAccess[]

  @@map("shipping_companies")
  @@index([name])
  @@index([createdAt])
}

// 5. Refresh Tokens Table
model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isRevoked])
}

// 6. User Brand Access Table
model UserBrandAccess {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  brandId   Int      @map("brand_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
  @@map("user_brand_access")
  @@index([userId, brandId])
  @@index([isActive])
  @@index([createdAt])
}

// 7. User Marketplace Access Table
model UserMarketplaceAccess {
  id            Int         @id @default(autoincrement())
  userId        Int         @map("user_id")
  marketplaceId Int         @map("marketplace_id")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketplace Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)

  @@unique([userId, marketplaceId])
  @@map("user_marketplace_access")
  @@index([userId, marketplaceId])
  @@index([isActive])
  @@index([createdAt])
}

// 8. User Shipping Access Table
model UserShippingAccess {
  id                Int             @id @default(autoincrement())
  userId            Int             @map("user_id")
  shippingCompanyId Int             @map("shipping_company_id")
  isActive          Boolean         @default(true) @map("is_active")
  createdAt         DateTime        @default(now()) @map("created_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingCompany ShippingCompany @relation(fields: [shippingCompanyId], references: [id], onDelete: Cascade)

  @@unique([userId, shippingCompanyId])
  @@map("user_shipping_access")
  @@index([userId, shippingCompanyId])
  @@index([isActive])
  @@index([createdAt])
}

// 9. User Login History Table
model UserLoginHistory {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  loginTime       DateTime  @map("login_time")
  logoutTime      DateTime? @map("logout_time")
  sessionDuration Int?      @map("session_duration") // in minutes
  ipAddress       String?   @map("ip_address")
  networkType     String?   @map("network_type")
  userAgent       String?   @map("user_agent")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_login_history")
  @@index([userId])
  @@index([loginTime])
  @@index([logoutTime])
  @@index([ipAddress])
  @@index([createdAt])
}

// 10. Products Table
model Product {
  id          Int      @id @default(autoincrement())
  brandId     Int      @map("brand_id")
  title       String
  groupSku    String   @unique @map("group_sku")
  subSku      String?  @map("sub_sku")  // Nullable, supports comma-separated values like "123ed,345Df,678gh"
  category    String
  collectionName String @default("") @map("collection_name")
  singleSetItem String @map("single_set_item")
  
  
  // Brand Pricing Columns (Mandatory)
  brandRealPrice      Decimal @map("brand_real_price") @db.Decimal(10,2)
  brandMiscellaneous  Decimal @map("brand_miscellaneous") @db.Decimal(10,2)
  brandPrice          Decimal @map("brand_price") @db.Decimal(10,2)
  msrp               Decimal @default(0.00) @map("msrp") @db.Decimal(10,2) // Manufacturer's Suggested Retail Price
  
  // Ecommerce Pricing Columns (Mandatory)
  shippingPrice       Decimal @map("shipping_price") @db.Decimal(10,2)
  commissionPrice     Decimal @map("commission_price") @db.Decimal(10,2)
  profitMarginPrice   Decimal @map("profit_margin_price") @db.Decimal(10,2)
  ecommerceMiscellaneous Decimal @map("ecommerce_miscellaneous") @db.Decimal(10,2)
  ecommercePrice      Decimal @map("ecommerce_price") @db.Decimal(10,2)
  
  // Image Columns (Optional)
  mainImageUrl        String? @map("main_image_url") // Main product image URL
  galleryImages       Json?   @map("gallery_images") // Array of gallery image URLs
  
  attributes  Json     // All extra data in JSONB format
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  listings Listing[]

  @@map("products")
  @@index([brandId])
  @@index([category])
  @@index([ecommercePrice])
  @@index([createdAt])
  @@index([brandId, category])
  @@index([brandId, ecommercePrice])
}

// 11. Listings Table (Only subSku must exist in product's subSku field)
model Listing {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")  // Reference to Product - For validation only
  brandId     Int      @map("brand_id")  // For access control and display
  title       String
  sku         String   @map("group_sku")  // Required - cannot be null
  subSku      String?  @map("sub_sku")  // Must exist in product's subSku field
  category    String
  collectionName String @default("") @map("collection_name")
  shipTypes   String   @map("ship_types")
  singleSetItem String @map("single_set_item")
  
  
  // Brand Pricing Columns (Mandatory)
  brandRealPrice      Decimal @map("brand_real_price") @db.Decimal(10,2)
  brandMiscellaneous  Decimal @map("brand_miscellaneous") @db.Decimal(10,2)
  brandPrice          Decimal @map("brand_price") @db.Decimal(10,2)
  msrp               Decimal @default(0.00) @map("msrp") @db.Decimal(10,2) // Manufacturer's Suggested Retail Price
  
  // Ecommerce Pricing Columns (Mandatory)
  shippingPrice       Decimal @map("shipping_price") @db.Decimal(10,2)
  commissionPrice     Decimal @map("commission_price") @db.Decimal(10,2)
  profitMarginPrice   Decimal @map("profit_margin_price") @db.Decimal(10,2)
  ecommerceMiscellaneous Decimal @map("ecommerce_miscellaneous") @db.Decimal(10,2)
  ecommercePrice      Decimal @map("ecommerce_price") @db.Decimal(10,2)
  
  // Image Columns (Optional)
  mainImageUrl        String? @map("main_image_url") // Main listing image URL
  galleryImages       Json?   @map("gallery_images") // Array of gallery image URLs
  
  // Product Counts (JSONB - maps each subSku value to its quantity)
  productCounts       Json?   @map("product_counts") // Example: {"subsku-1": 10, "subsku-2": 5}
  
  attributes  Json     // All extra data in JSONB format
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  inventory   Inventory[]

  @@map("listings")
  @@index([productId])
  @@index([brandId])
  @@index([category])
  @@index([ecommercePrice])
  @@index([createdAt])
  @@index([brandId, category])
  @@index([brandId, ecommercePrice])
}

// 12. Settings Table
model Setting {
  id              Int      @id @default(autoincrement())
  inventoryConfig Json     @default("{\"minValue\": 3}") @map("inventory_config") // JSONB: {minValue: 3}
  ownBrand        Json     @default("{}") @map("own_brand") // JSONB: {"Original Brand": "Custom Brand"}
  shippingValues  Json?    @map("shipping_values") // JSONB: {githValue: 165, weight: 150} - DEPRECATED, use LTLValues and PARCELValues
  LTLValues       Json     @default("{\"githValue\": 166, \"weight\": 151}") @map("ltl_values") // JSONB: {githValue: 166, weight: 151}
  PARCELValues    Json     @default("{\"githValue\": 165, \"weight\": 150}") @map("parcel_values") // JSONB: {githValue: 165, weight: 150}
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("settings")
  @@index([createdAt])
}

// 13. Inventory Table
model Inventory {
  id        Int      @id @default(autoincrement())
  listingId Int      @map("listing_id")  // Reference to Listing (first listing that used this subSku)
  brandId   Int      @map("brand_id")    // Brand for access control
  subSku    String   @unique @map("sub_sku")  // One subSku per row - UNIQUE across all listings
  quantity  Int      @default(0)         // Quantity for this subSku (shared across all listings)
  eta       String?                      // Estimated Time of Arrival
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  brand   Brand   @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("inventory")
  @@index([listingId])
  @@index([brandId])
  @@index([subSku])
  @@index([createdAt])
  @@index([brandId, subSku])
}


