// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Users Table
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens        RefreshToken[]
  userBrandAccess      UserBrandAccess[]
  userMarketplaceAccess UserMarketplaceAccess[]
  userShippingAccess   UserShippingAccess[]
  loginHistory         UserLoginHistory[]
  
  // Management History Relations
  adminActions UserManagementHistory[] @relation("AdminActions")
  targetUserActions UserManagementHistory[] @relation("TargetUserActions")
  adminBrandActions BrandManagementHistory[] @relation("AdminBrandActions")
  adminMarketplaceActions MarketplaceManagementHistory[] @relation("AdminMarketplaceActions")
  adminShippingActions ShippingManagementHistory[] @relation("AdminShippingActions")
  adminPermissionActions PermissionManagementHistory[] @relation("AdminPermissionActions")
  targetUserPermissionActions PermissionManagementHistory[] @relation("TargetUserPermissionActions")
  productActions ProductManagementHistory[] @relation("UserProductActions")

  @@map("users")
}

enum Role {
  USER  @map("user")
  ADMIN @map("admin")
}

// 2. Brands Table
model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userBrandAccess UserBrandAccess[]
  managementHistory BrandManagementHistory[]
  productActions ProductManagementHistory[] @relation("BrandProductActions")

  @@map("brands")
}

// 3. Marketplaces Table
model Marketplace {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userMarketplaceAccess UserMarketplaceAccess[]
  managementHistory MarketplaceManagementHistory[]

  @@map("marketplaces")
}

// 4. Shipping Companies Table
model ShippingCompany {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userShippingAccess UserShippingAccess[]
  managementHistory ShippingManagementHistory[]

  @@map("shipping_companies")
}

// 5. Refresh Tokens Table
model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// 6. User Brand Access Table
model UserBrandAccess {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  brandId   Int      @map("brand_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
  @@map("user_brand_access")
}

// 7. User Marketplace Access Table
model UserMarketplaceAccess {
  id            Int         @id @default(autoincrement())
  userId        Int         @map("user_id")
  marketplaceId Int         @map("marketplace_id")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketplace Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)

  @@unique([userId, marketplaceId])
  @@map("user_marketplace_access")
}

// 8. User Shipping Access Table
model UserShippingAccess {
  id                Int             @id @default(autoincrement())
  userId            Int             @map("user_id")
  shippingCompanyId Int             @map("shipping_company_id")
  isActive          Boolean         @default(true) @map("is_active")
  createdAt         DateTime        @default(now()) @map("created_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingCompany ShippingCompany @relation(fields: [shippingCompanyId], references: [id], onDelete: Cascade)

  @@unique([userId, shippingCompanyId])
  @@map("user_shipping_access")
}

// 9. User Login History Table
model UserLoginHistory {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  loginTime       DateTime  @map("login_time")
  logoutTime      DateTime? @map("logout_time")
  sessionDuration Int?      @map("session_duration") // in minutes
  ipAddress       String?   @map("ip_address")
  networkType     String?   @map("network_type")
  userAgent       String?   @map("user_agent")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_login_history")
}

// Management History Tables
model UserManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  targetUserId Int?    @map("target_user_id")
  action      String   // CREATE, UPDATE, DELETE, ROLE_CHANGE, EMAIL_CHANGE, PASSWORD_CHANGE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminActions", fields: [adminId], references: [id], onDelete: Cascade)
  targetUser  User?    @relation("TargetUserActions", fields: [targetUserId], references: [id], onDelete: SetNull)

  @@map("user_management_history")
}

model BrandManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  brandId     Int      @map("brand_id")
  action      String   // CREATE, UPDATE, DELETE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminBrandActions", fields: [adminId], references: [id], onDelete: Cascade)
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("brand_management_history")
}

model MarketplaceManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  marketplaceId Int    @map("marketplace_id")
  action      String   // CREATE, UPDATE, DELETE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminMarketplaceActions", fields: [adminId], references: [id], onDelete: Cascade)
  marketplace Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)

  @@map("marketplace_management_history")
}

model ShippingManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  shippingId  Int      @map("shipping_id")
  action      String   // CREATE, UPDATE, DELETE
  details     Json?    // Additional details like old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminShippingActions", fields: [adminId], references: [id], onDelete: Cascade)
  shipping    ShippingCompany @relation(fields: [shippingId], references: [id], onDelete: Cascade)

  @@map("shipping_management_history")
}

// Permission Management History
model PermissionManagementHistory {
  id          Int      @id @default(autoincrement())
  adminId     Int      @map("admin_id")
  targetUserId Int    @map("target_user_id")
  entityType  String   // BRAND, MARKETPLACE, SHIPPING
  entityId    Int      @map("entity_id")
  action      String   // GRANT, REVOKE, TOGGLE
  details     Json?    // Additional details like old/new access status
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  admin       User     @relation("AdminPermissionActions", fields: [adminId], references: [id], onDelete: Cascade)
  targetUser  User     @relation("TargetUserPermissionActions", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@map("permission_management_history")
}

// Product Management History (Future)
model ProductManagementHistory {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")        // User who added the product
  brandId     Int      @map("brand_id")       // Brand for which product was added
  productId   Int?     @map("product_id")     // Product ID (if available)
  action      String   // ADD, UPDATE, DELETE, BULK_ADD
  details     Json?    // Product details, old/new values
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation("UserProductActions", fields: [userId], references: [id], onDelete: Cascade)
  brand       Brand    @relation("BrandProductActions", fields: [brandId], references: [id], onDelete: Cascade)

  @@map("product_management_history")
}